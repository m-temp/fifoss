/* Generated by Yosys 0.9+4274 (git sha1 e6dd4db0a, clang 12.0.1 -fPIC -Os) */

module figenerator(fi_0, fi_1, fi_combined);
  output [6:0] fi_0;
  output [36:0] fi_1;
  input [43:0] fi_combined;
  assign fi_1 = fi_combined[43:7];
  assign fi_0 = fi_combined[6:0];
endmodule

(* top =  1  *)
(* src = "rtl/top.sv:1.1-80.10" *)
module top(clk, rst, start_i, alert_o, done_o, fi_combined);
  (* src = "rtl/top.sv:68.3-78.16" *)
  wire [3:0] _00_;
  (* src = "rtl/top.sv:0.0-0.0" *)
  wire [2:0] _01_;
  (* src = "rtl/top.sv:0.0-0.0" *)
  wire [2:0] _02_;
  (* src = "rtl/top.sv:73.15-73.25" *)
  wire [3:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire [3:0] _09_;
  wire [3:0] _10_;
  wire _11_;
  reg [3:0] _12_;
  reg [2:0] _13_;
  wire [2:0] _14_;
  wire [2:0] _15_;
  wire _16_;
  wire [2:0] _17_;
  wire [2:0] _18_;
  wire _19_;
  wire [2:0] _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  wire [2:0] _31_;
  wire _32_;
  wire [2:0] _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  (* src = "rtl/top.sv:5.20-5.27" *)
  output alert_o;
  (* src = "rtl/top.sv:2.19-2.22" *)
  input clk;
  (* src = "rtl/top.sv:18.15-18.18" *)
  wire [3:0] cnt;
  (* src = "rtl/top.sv:6.20-6.26" *)
  output done_o;
  wire [36:0] fi_comb;
  wire [3:0] fi_comb_0;
  wire fi_comb_1;
  wire [2:0] fi_comb_10;
  wire fi_comb_11;
  wire fi_comb_12;
  wire fi_comb_13;
  wire fi_comb_14;
  wire fi_comb_15;
  wire fi_comb_16;
  wire fi_comb_17;
  wire fi_comb_18;
  wire fi_comb_19;
  wire fi_comb_20;
  wire fi_comb_21;
  wire [3:0] fi_comb_22;
  wire [2:0] fi_comb_4;
  wire [2:0] fi_comb_5;
  wire fi_comb_6;
  wire [2:0] fi_comb_7;
  wire [2:0] fi_comb_8;
  wire fi_comb_9;
  input [43:0] fi_combined;
  wire [6:0] fi_ff;
  wire [3:0] fi_ff_2;
  wire [2:0] fi_ff_3;
  (* src = "rtl/top.sv:3.19-3.22" *)
  input rst;
  (* src = "rtl/top.sv:19.9-19.20" *)
  wire start_count;
  (* src = "rtl/top.sv:4.19-4.26" *)
  input start_i;
  (* enum_value_000 = "\\IDLE" *)
  (* enum_value_001 = "\\COUNT" *)
  (* enum_value_010 = "\\TWO" *)
  (* enum_value_110 = "\\ERROR" *)
  (* enum_value_111 = "\\FINAL" *)
  (* src = "rtl/top.sv:16.21-16.29" *)
  (* wiretype = "\\state_e" *)
  wire [2:0] state_cs;
  (* enum_value_000 = "\\IDLE" *)
  (* enum_value_001 = "\\COUNT" *)
  (* enum_value_010 = "\\TWO" *)
  (* enum_value_110 = "\\ERROR" *)
  (* enum_value_111 = "\\FINAL" *)
  (* src = "rtl/top.sv:16.11-16.19" *)
  (* wiretype = "\\state_e" *)
  wire [2:0] state_ns;
  assign _10_ = cnt + (* src = "rtl/top.sv:73.15-73.25" *) 4'h1;
  assign start_count = fi_comb[27] ^ _26_;
  assign _27_ = fi_comb[28] ^ _04_;
  assign done_o = fi_comb[29] ^ _05_;
  assign _28_ = fi_comb[30] ^ _06_;
  assign alert_o = fi_comb[31] ^ _07_;
  assign _29_ = fi_comb[32] ^ _08_;
  assign _00_ = fi_comb[36:33] ^ _09_;
  assign _03_ = fi_comb[3:0] ^ _10_;
  assign _30_ = fi_comb[4] ^ _11_;
  assign cnt = fi_ff[3:0] ^ _12_;
  assign state_cs = fi_ff[6:4] ^ _13_;
  assign _31_ = fi_comb[7:5] ^ _14_;
  assign _02_ = fi_comb[10:8] ^ _15_;
  assign _32_ = fi_comb[11] ^ _16_;
  assign _33_ = fi_comb[14:12] ^ _17_;
  assign _01_ = fi_comb[17:15] ^ _18_;
  assign _34_ = fi_comb[18] ^ _19_;
  assign state_ns = fi_comb[21:19] ^ _20_;
  assign _35_ = fi_comb[22] ^ _21_;
  assign _36_ = fi_comb[23] ^ _22_;
  assign _37_ = fi_comb[24] ^ _23_;
  assign _38_ = fi_comb[25] ^ _24_;
  assign _39_ = fi_comb[26] ^ _25_;
  assign _11_ = cnt == (* src = "rtl/top.sv:36.13-36.27" *) 4'hc;
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/top.sv:68.3-78.16" *)
  always @(posedge clk, posedge rst)
    if (rst) _12_ <= 4'h0;
    else _12_ <= _00_;
  (* \always_ff  = 32'd1 *)
  (* src = "rtl/top.sv:60.3-66.14" *)
  always @(posedge clk, posedge rst)
    if (rst) _13_ <= 3'h0;
    else _13_ <= state_ns;
  assign _14_ = _30_ ? (* full_case = 32'd1 *) (* src = "rtl/top.sv:36.13-36.27|rtl/top.sv:36.9-38.12" *) 3'h2 : state_cs;
  assign _15_ = _32_ ? (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) _31_ : 3'hx;
  assign _16_ = state_cs == (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 3'h1;
  assign _17_ = start_i ? (* full_case = 32'd1 *) (* src = "rtl/top.sv:29.13-29.20|rtl/top.sv:29.9-31.12" *) 3'h1 : state_cs;
  assign _18_ = _34_ ? (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) _33_ : 3'hx;
  assign _19_ = ! (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) state_cs;
  function [2:0] _73_;
    input [2:0] a;
    input [14:0] b;
    input [4:0] s;
    (* full_case = 32'd1 *)
    (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *)
    (* parallel_case *)
    casez (s)
      5'b????1:
        _73_ = b[2:0];
      5'b???1?:
        _73_ = b[5:3];
      5'b??1??:
        _73_ = b[8:6];
      5'b?1???:
        _73_ = b[11:9];
      5'b1????:
        _73_ = b[14:12];
      default:
        _73_ = a;
    endcase
  endfunction
  assign _20_ = _73_(3'h6, { _01_, _02_, 6'h3f, state_cs }, { _39_, _38_, _37_, _36_, _35_ });
  assign _21_ = state_cs == (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 3'h6;
  assign _22_ = state_cs == (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 3'h7;
  assign _23_ = state_cs == (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 3'h2;
  assign _24_ = state_cs == (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 3'h1;
  assign _25_ = ! (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) state_cs;
  assign _26_ = _27_ ? (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 1'h1 : 1'h0;
  assign _04_ = state_cs == (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 3'h1;
  assign _05_ = _28_ ? (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 1'h1 : 1'h0;
  assign _06_ = state_cs == (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 3'h2;
  assign _07_ = _29_ ? (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 1'h1 : 1'h0;
  assign _08_ = state_cs == (* full_case = 32'd1 *) (* src = "rtl/top.sv:0.0-0.0|rtl/top.sv:27.5-57.12" *) 3'h6;
  assign _09_ = start_count ? (* full_case = 32'd1 *) (* src = "rtl/top.sv:72.11-72.22|rtl/top.sv:72.7-76.10" *) _03_ : 4'h0;
  figenerator u_figenerator (
    .fi_0(fi_ff),
    .fi_1(fi_comb),
    .fi_combined(fi_combined)
  );
  assign fi_comb_16 = fi_comb[27];
  assign fi_comb_15 = fi_comb[26];
  assign fi_comb_14 = fi_comb[25];
  assign fi_comb_13 = fi_comb[24];
  assign fi_comb_12 = fi_comb[23];
  assign fi_comb_11 = fi_comb[22];
  assign fi_comb_10 = fi_comb[21:19];
  assign fi_comb_9 = fi_comb[18];
  assign fi_comb_18 = fi_comb[29];
  assign fi_comb_8 = fi_comb[17:15];
  assign fi_comb_7 = fi_comb[14:12];
  assign fi_comb_6 = fi_comb[11];
  assign fi_comb_5 = fi_comb[10:8];
  assign fi_comb_4 = fi_comb[7:5];
  assign fi_comb_17 = fi_comb[28];
  assign fi_ff_3 = fi_ff[6:4];
  assign fi_comb_19 = fi_comb[30];
  assign fi_ff_2 = fi_ff[3:0];
  assign fi_comb_1 = fi_comb[4];
  assign fi_comb_0 = fi_comb[3:0];
  assign fi_comb_20 = fi_comb[31];
  assign fi_comb_21 = fi_comb[32];
  assign fi_comb_22 = fi_comb[36:33];
endmodule
